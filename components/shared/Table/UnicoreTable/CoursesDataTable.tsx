"use client";

import IconButton from "../../IconButton";
import { useState } from "react";
import * as XLSX from "xlsx";
import { CourseDataItem } from "@/types";
import DataTable from "./DataTable";
import ErrorComponent from "../Status/ErrorComponent";
import TableSkeleton from "./TableSkeleton";
import NoResult from "../../NoResult";

export default function CoursesDataTable() {
  const [isEditTable, setIsEditTable] = useState(false);
  const [isMultipleDelete, setIsMultipleDelete] = useState(false);
  const [dataTable, setDataTable] = useState<CourseDataItem[]>([]);
  const [errorMessages, setErrorMessages] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  // X·ª¨ L√ù UPLOAD FILE L·ªöP H·ªåC
  const handleCoursesFileUpload = (e: any) => {
    setIsLoading(true);
    setErrorMessages([]);
    setDataTable([]);

    const reader = new FileReader();
    reader.readAsArrayBuffer(e.target.files[0]);
    reader.onload = (e) => {
      const data = e.target?.result || [];
      const workbook = XLSX.read(data, { type: "binary" });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      // B·ªè 2 d√≤ng ƒë·∫ßu c·ªßa t√™n file
      const parsedData = XLSX.utils.sheet_to_json(sheet, {
        range: 2, // Ch·ªâ s·ªë 2 ƒë·∫°i di·ªán cho h√†ng 3 (v√¨ index b·∫Øt ƒë·∫ßu t·ª´ 0)
        defval: "",
      });

      let errorMessages: string[] = [];

      const transformedData = parsedData.map((item: any, index: number) => {
        // Ki·ªÉm tra c√°c tr∆∞·ªùng quan tr·ªçng (required fields)
        const requiredFields = {
          "M√£ m√¥n h·ªçc": item["M√É MH"],
          "M√£ l·ªõp": item["M√É L·ªöP"],
          "T√™n m√¥n h·ªçc": item["T√äN M√îN H·ªåC"],
          "M√£ GV": item["M√É GI·∫¢NG VI√äN"],
          "T√™n GV": item["T√äN GI·∫¢NG VI√äN"],
          "S·ªë TC": item["T·ªê TC"],
          HTGD: item["HTGD"],
          "Ng√†y Bƒê": item["NBD"],
          "Ng√†y KT": item["NKT"],
          "H·ªçc k·ª≥": item["H·ªåC K·ª≤"],
          "NƒÉm h·ªçc": item["NƒÇM H·ªåC"],
        };

        // L·∫∑p qua c√°c tr∆∞·ªùng ƒë·ªÉ ki·ªÉm tra n·∫øu c√≥ gi√° tr·ªã undefined
        if (index === 0) {
          Object.entries(requiredFields).forEach(([fieldName, value]) => {
            if (value === undefined) {
              errorMessages.push(`Tr∆∞·ªùng "${fieldName}" b·ªã thi·∫øu ho·∫∑c l·ªói.`);
            }
          });
        }

        return {
          type: "course",
          STT: item.STT,
          data: {
            "M√£ m√¥n h·ªçc": item["M√É MH"],
            "M√£ l·ªõp": item["M√É L·ªöP"],
            "T√™n m√¥n h·ªçc": item["T√äN M√îN H·ªåC"],
            "M√£ GV": item["M√É GI·∫¢NG VI√äN"],
            "T√™n GV": item["T√äN GI·∫¢NG VI√äN"],
            "Sƒ© s·ªë": "Ch∆∞a c·∫≠p nh·∫≠t",
            "S·ªë TC": item["T·ªê TC"],
            HTGD: item["HTGD"],
            "Khoa qu·∫£n l√Ω": item["T√äN GI·∫¢NG VI√äN"] ? false : true,
            "Ng√†y Bƒê": item["NBD"],
            "Ng√†y KT": item["NKT"],
            "H·ªçc k·ª≥": item["H·ªåC K·ª≤"],
            "NƒÉm h·ªçc": item["NƒÇM H·ªåC"],
          },
        };
      });

      if (errorMessages.length > 0) {
        setErrorMessages(errorMessages);
      } else {
        setDataTable(transformedData as []);
      }

      setIsLoading(false);
    };
  };

  return (
    <div>
      {errorMessages.length > 0 && (
        <div className="mb-6">
          {errorMessages.map((item, index) => (
            <ErrorComponent
              text={item}
              onClickClose={() => {
                setErrorMessages((prevErrors) =>
                  prevErrors.filter((_, i) => i !== index)
                );
              }}
            />
          ))}
        </div>
      )}

      <input
        type="file"
        accept=".xlsx, .xls"
        onChange={handleCoursesFileUpload}
      />

      <a
        href="/assets/KLTN - template import ds l·ªõp.xlsx"
        download
        className="text-blue-500 underline"
      >
        T·∫£i xu·ªëng template file import l·ªõp h·ªçc
      </a>

      {isLoading ? (
        <TableSkeleton />
      ) : dataTable.length > 0 ? (
        <>
          <div className="flex justify-end gap-4 mb-5 items-center">
            <p>ƒê·ªÉ scroll ngang, nh·∫•n n√∫t Shift v√† cu·ªôn chu·ªôt</p>
          </div>

          <DataTable
            dataTable={dataTable}
            isEditTable={isEditTable}
            isMultipleDelete={isMultipleDelete}
            onClickEditTable={() => {
              setIsEditTable(true);
            }}
            onSaveEditTable={() => {
              setIsEditTable(false);
            }}
            onClickMultipleDelete={() => {
              setIsMultipleDelete(true);
            }}
            onClickDelete={() => {}}
            onClickGetOut={() => {
              setIsMultipleDelete(false);
            }}
          />
        </>
      ) : (
        <NoResult
          title="Kh√¥ng c√≥ d·ªØ li·ªáu!"
          description="üöÄ Import file danh s√°ch ƒë·ªÉ th·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu."
          link="/"
          linkTitle="Choose file"
        />
      )}
    </div>
  );
}
